import { createSlice } from "@reduxjs/toolkit";
import Restaurants from "../../mocks/Restaurants";
import { DisheItemData, RestaurantReducerInitialState } from "../types";

/* The `initialState` constant is defining the initial state of the restaurant reducer. It is an object
that contains the following properties: */
const initialState: RestaurantReducerInitialState = {
  data: Restaurants,
  cart: [],
  totalDishAddedToCart: 0,
  totalCartAmount: 0,
};

/**
 * The function updates the count of a dish item in a shopping cart.
 * @param cart - An array of objects representing the items in the cart. Each object should have a
 * property called "Name" and a property called "Count".
 * @param {DisheItemData} payload - The `payload` parameter is an object of type `DisheItemData`.
 * @returns The function `updateCart` returns a new array of `DisheItemData` objects with updated
 * `Count` values.
 */
const updateCart = (cart: Array<DisheItemData>, payload: DisheItemData) => {
  return cart.map((item: DisheItemData) => {
    const Count = item.Name == payload.Name ? payload.Count : item.Count;
    return {
      ...item,
      Count,
    };
  });
};

/* The code `export const restaurantSlice = createSlice({ ... })` is creating a Redux slice for
managing the state related to restaurants. */
export const restaurantSlice = createSlice({
  name: "restaurants",
  initialState,
  reducers: {
    /* The `addToCart` function is an action creator that is called when a dish item is added to the
    shopping cart. It takes two parameters: `state` and `action`. */
    addToCart: (state, action) => {
      if (action.payload.Count === 1) {
        state.cart = [...state.cart, action.payload];
      } else {
        state.cart = updateCart(state.cart, action.payload);
      }
      state.totalDishAddedToCart += 1;
      state.totalCartAmount += action.payload.Price;
    },
    /* The `removeFromCart` function is an action creator that is called when a dish item is removed
    from the shopping cart. It takes two parameters: `state` and `action`. */
    removeFromCart: (state, action) => {
      state.totalDishAddedToCart -= 1;
      state.totalCartAmount -= action.payload.Price;
      if (action.payload.Count > 0) {
        state.cart = updateCart(state.cart, action.payload);
      } else {
        const taskIndex = state.cart.findIndex(
          (item) => item.Name === action.payload.Name
        );
        if (taskIndex !== -1) {
          state.cart.splice(taskIndex, 1);
        }
      }
    },
    /* The `deleteCart` action creator is used to reset the shopping cart state. When this action is
   dispatched, it sets the `totalDishAddedToCart` and `totalCartAmount` properties to 0, and clears
   the `cart` array by assigning an empty array to it. This effectively removes all items from the
   shopping cart and resets the total count and amount to zero. */
    deleteCart: (state) => {
      state.totalDishAddedToCart = 0;
      state.totalCartAmount = 0;
      state.cart = [];
    },
  },
});

/* The line `export const { addToCart, removeFromCart, deleteCart } = restaurantSlice.actions;` is
exporting the action creators generated by the `createSlice` function. */
export const { addToCart, removeFromCart, deleteCart } =
  restaurantSlice.actions;

/* `export default restaurantSlice.reducer;` is exporting the reducer function generated by the
`createSlice` function. This allows the reducer to be imported and used in other parts of the
application to manage the state related to restaurants. */
export default restaurantSlice.reducer;
